const bcrypt = require('bcryptjs');
const User = require('../models/User');
const dbName = 'mongodb+srv://user:password@cluster0.mongodb.net/blogDB';
mongoose.connect(dbName, { useNewUrlParser: true, useUnifiedTopology: true });

// New registerUser function
module.exports.registerUser = function(userData) {
  return new Promise((resolve, reject) => {
    bcrypt.hash(userData.password, 10).then(hash => {
      userData.password = hash;
      const newUser = new User(userData);
      newUser.save().then(() => {
        resolve();
      }).catch((err) => {
        if (err.code === 11000) {
          reject("User Name already taken.");
        } else {
          reject("There was an error creating the user: " + err);
        }
      });
    }).catch(err => {
      console.log(err);
      reject("There was an error encrypting the password");
    });
  });
};

// New checkUser function
module.exports.checkUser = function(userData) {
  return new Promise((resolve, reject) => {
    User.find({ userName: userData.userName }).exec().then(users => {
      if (users.length == 0) {
        reject("Unable to find user: " + userData.userName);
      } else {
        bcrypt.compare(userData.password, users[0].password).then((result) => {
          if (result === true) {
            users[0].loginHistory.push({dateTime: (new Date()).toString(), userAgent: userData.userAgent});
            User.updateOne({ userName: users[0].userName }, { loginHistory: users[0].loginHistory }).exec().then(() => {
              resolve(users[0]);
            }).catch((err) => {
              reject("There was an error verifying the user: " + err);
            });
          } else {
            reject("Incorrect Password for user: " + userData.userName);
          }
        });
      }
    }).catch(err => {
      console.log(err);
      reject("Unable to find user: " + userData.userName);
    });
  });
};
